<!doctype html>

<html>
<head>
	<title>Rage.reduce()</title>	
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.1.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="css/foundation.min.css">
  <link rel="stylesheet" href="css/perfect-scrollbar.css">
  <link rel="stylesheet" href="css/introHCI.css">
  
  <!-- this is a comment in HTML -->

  <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
  <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
      <![endif]-->   
    </head>
<body class="container" id="container">
<nav class="top-bar fullWidth" data-topbar role="navigation">
  <ul class="title-area">
    <li class="name">
      <h1><a href="/">Rage.reduce()</a></h1>
    </li>
  </ul>

  <section class="top-bar-section">
    <!-- Right Nav Section -->
    <ul class="right">
      <li><a href="/about">About</a></li>
      <li><a href="/team">Team</a></li>
    </ul>
  </section>
</nav>
<div class="page-header">
  <h1>Rage.reduce() <small id="typing"></small></h1>
</div>
<h3>Insert Training Set Here</h3>
<textarea data-bind="value : trainingSet"></textarea>
<button class="button success" data-bind="click : submitTrainingSet">Submit</button>
<div data-bind="foreach:messages">
  <div class="row">
    <div class="columns large-8 medium-8 small-8">
      <div class="alert" data-bind="text : message, css : {'alert-success' : score > 0, 'alert-info' : score ==0, 'alert-danger' : score <= -4}">
      </div>
    </div>
    <div data-bind="if: ($parent.solution()[message] != null)"> 
      <div class="columns large-4 medium-4 small-4">
        <div id="stayinthere" style="height: 3em; height: 5em;">
          <span style="text-overflow: ellipsis;"data-tooltip aria-haspopup="true" class="has-tip" data-bind="attr : {title : $parent.solution()[message]}, text : $parent.solution()[message].slice(0, 80)"></span>
        </div>
      </div>
    </div>
    <div data-bind="if: ($parent.solution()[message] == null)">
      <div class="columns large-4 medium-4 small-4">
        <a data-bind="click: $parent.suggestMessage" class="button success" data-reveal-id="myModal">Suggest Positive Phrase</a>
      </div>
    </div>
  </div>
</div>
</body>
    <script src="/js/firebase.js"></script>  
    <script src="https://code.jquery.com/jquery.js"></script>
    <script src='./js/foundation.min.js'></script>
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.0/js/bootstrap.min.js"></script>
    <script src="/js/knockout.js"></script>
    <script src="/js/socket.io/dist/socket.io.js"></script>
    <script src="http://code.highcharts.com/highcharts.js"></script>
    <script src="/js/typed.js"></script>
    <script src='/js/vendor/modernizr.js'></script>

  <script>
    $(document).ready(function(){
      $("#typing").typed({
        strings:["helping you give a fuc"], 
        typespeed:0,
        callback : function(){
          setTimeout(function(){
          $("#typing").text("This message has been censored");
        },500);

        }
        }
        );
      var dict = {};
      $(document).foundation();
      var viewModel = {
        messages : ko.observableArray([]),
        solution: ko.observable(dict),
        trainingSet: ko.observable(''),
        suggestMessage: function(message) {
          var ans = window.prompt('What would you like to replace it with?');
          if(ans.length > 80) {
            alert('Your proposed solution is too long! (80 letters max)');
          } else if(ans.length == 0) {
            alert('Please enter a solution.');
          } else {
            $.post('/positiveMessage', {oldMessage: message.message, message: ans}, function(data) {
              console.log(data);
            });
          }
        }
      };

      function trainDataSet(dataset){
        if(dataset.length > 0){
          dataset[0] = dataset[0].split(":");
          var current = dataset[0][0];
          var newMsg = dataset[0][1];
        $.post("/trainDataSet", { oldMsg : current, newMsg : newMsg}, function(){
          trainDataSet(dataset.slice(1));
        });
        }
      }

      viewModel.submitTrainingSet = function(){
        var data = viewModel.trainingSet().split("\n");
        trainDataSet(data);
      };
      
      $.get('/getMessageFix', {}, function(data) {
        for(var i = 0; i < data.length; i++) {
            dict[data[i].message] = data[i].messageFix;
        }
        console.log(dict);
      });

      var fb = new Firebase('https://flickering-fire-2908.firebaseio.com/');

      if(fb) {
        console.log('connected to database');
      }

      fb.on('child_added', function(data) {
        var message = data.val();
        console.log(message);
        var messages = viewModel.messages();
        for(var i = 0; i < messages.length; i++){
          if(messages[i].message == message.message){
            return;
          }
        }
        viewModel.messages.push(message);
      });

      ko.applyBindings(viewModel, document.getElementById("container"));
    });
  </script>
</html>
